name: pytest linux

on:
  push:
  pull_request:
    branches: [main]
  schedule:
    - cron: "15 7 * * *"

concurrency:
  group: pytest-linux
  cancel-in-progress: true

env:
  PYTHONPATH: ${{ github.workspace }}/src
  SENZING_TOOLS_DATABASE_URL: sqlite3://na:na@nowhere/tmp/sqlite/G2C.db

permissions: {}

jobs:
  pytest-linux:
    name: "pytest with Senzing: ${{ matrix.senzingsdk-version }}; OS: ${{ matrix.os }}; Python ${{ matrix.python-version }}"
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
        senzingsdk-version: ["4.1.1-25300", "4.1.1-25295"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m venv ./venv
          source ./venv/bin/activate
          echo "PATH=${PATH}" >> "${GITHUB_ENV}"
          python -m pip install --upgrade pip
          python -m pip install --group all .

      - if: matrix.python-version == '3.9' || matrix.python-version == '3.10'
        name: Install python libraries for python 3.9 and 3.10
        run: |
          source ./venv/bin/activate
          python -m pip install typing_extensions

      - name: Install Senzing SDK
        uses: senzing-factory/github-action-install-senzing-sdk@v3
        with:
          senzingsdk-version: ${{ matrix.senzingsdk-version }}

      - name: Set environment variables
        run: |
          SENZING_PATH="/opt/senzing"
          {
            echo "SENZING_PATH=${SENZING_PATH}"
            echo "LD_LIBRARY_PATH=${SENZING_PATH}/er/lib"
          } >> "$GITHUB_ENV"

      - name: Copy /etc files
        run: |
          sudo mkdir -p /etc/opt/senzing
          sudo cp testdata/senzing-license/g2.lic /etc/opt/senzing/g2.lic

      - name: Copy test database files
        run: |
          mkdir -p /tmp/sqlite
          cp testdata/sqlite/G2C.db /tmp/sqlite/

      - name: Enable core dumps
        run: |
          ulimit -c unlimited
          echo "core.%e.%p.%t" | sudo tee /proc/sys/kernel/core_pattern
          echo "Core dump settings:"
          ulimit -a | grep core

      - name: Run pytest
        run: |
          source ./venv/bin/activate
          set +e
          # Enable core dumps (THIS IS THE KEY PART)
          ulimit -c unlimited

          # Verify it's set
          ulimit -c
          pytest tests/ -vvv --capture=no
          EXIT_CODE=$?
          set -e

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Pytest failed with exit code: $EXIT_CODE"

            case $EXIT_CODE in
              1) echo "::error::Test failures detected" ;;
              5) echo "::error::No tests were collected" ;;
              134) echo "::error::Process aborted - possible segfault or memory corruption" ;;
            esac
          fi

          # Check the core pattern
          cat /proc/sys/kernel/core_pattern

          # Check if core dumps are disabled
          ulimit -a | grep core

          # Look in other common locations
          find /tmp -name "core*" -type f 2>/dev/null
          find /cores -name "core*" -type f 2>/dev/null
          ls -la core 2>/dev/null
          ls -la /var/crash/ 2>/dev/null

          exit $EXIT_CODE

      - name: Analyze core dump
        if: always()
        run: |
          sudo apt-get install -y gdb

          # Find core dump, excluding Python files
          CORE_FILE=$(find . -name "core.*" -type f \
            ! -name "*.py" \
            ! -name "*.pyc" \
            ! -name "*.pyi" \
            ! -path "*/venv/*" \
            ! -path "*/__pycache__/*" \
            -size +1M \
            | head -1)

          if [ -n "$CORE_FILE" ]; then
            echo "Found core dump: $CORE_FILE"

            # Get backtrace
            gdb -batch \
              -ex "thread apply all bt full" \
              -ex "quit" \
              ./venv/bin/python "$CORE_FILE" > backtrace.txt 2>&1

            cat backtrace.txt
          else
            echo "No core dump found"
            echo "Checking system limits:"
            ulimit -a
          fi

      - name: Upload core dump and backtrace
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-dump-analysis
          path: |
            core.*
            backtrace.txt
          if-no-files-found: warn

      # Use pytest to check examples, there are no "test" classes/functions, pytest imports
      # the .py files. If there is a Python error in the examples, an exit code of 1
      # is returned. If there are no Python errors but pytest didn't think it found any
      # tests an exit code of 5 is returned, this is a pass but need to capture it and
      # return 0 - https://docs.pytest.org/en/stable/reference/exit-codes.html
      - name: Run pytest on examples
        run: |
          source ./venv/bin/activate
          set +e
          pytest \
            examples/misc/ \
            examples/extras/ \
            examples/szabstractfactory/ \
            examples/szconfig/ \
            examples/szconfigmanager/ \
            examples/szdiagnostic/ \
            examples/szengine/ \
            examples/szproduct/ \
            --capture=no \
            -o python_files=*.py \
            --verbose
          pytest_exit_code="$?"
          set -e
          if [ "$pytest_exit_code" -eq 5 ]; then
            echo -e "\nExit code from pytest was $pytest_exit_code, this is expected testing the examples if there were no Python errors\n"
            exit 0
          else
            exit "$pytest_exit_code"
          fi

      - name: Rename coverage file
        env:
          COVERAGE_FILE: "coverage.${{ matrix.python-version }}-${{ matrix.senzingsdk-version }}"
        run: |
          mv .coverage "$COVERAGE_FILE"

      - name: Store coverage file
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-${{ matrix.python-version }}-${{ matrix.senzingsdk-version }}"
          path: "coverage.${{ matrix.python-version }}-${{ matrix.senzingsdk-version }}"

  coverage:
    if: github.event_name == 'pull_request'
    name: Coverage
    needs: pytest-linux
    permissions:
      pull-requests: write
      contents: write
    uses: senzing-factory/build-resources/.github/workflows/python-coverage-comment.yaml@v3

  slack-notification:
    needs: [pytest-linux]
    if: ${{ always() && contains(fromJSON('["failure", "cancelled"]'), needs.pytest-linux.result) && (github.ref_name == github.event.repository.default_branch || github.event_name == 'schedule') }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    uses: senzing-factory/build-resources/.github/workflows/build-failure-slack-notification.yaml@v3
    with:
      job-status: ${{ needs.pytest-linux.result }}
